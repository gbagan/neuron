import { Component, Index, Show } from "solid-js"
import Ruler from "./Ruler.civet"
import { Pattern, State } from "../model.civet"

type AllNeuronsComponent = Component<{
  state: State
  patterns: Pattern[]
  nbStates: number
  stateIdx: number
  learn: =>
  changeCurrentState: (i: number) =>
  runSimulation: =>
  closeDialog: =>
}>

AllNeuronsDialog: AllNeuronsComponent := (props) =>
  <div class="dialog-title">Neurones de sortie
  <div class="dialog-body flex flex-col ">
    <div class="grid grid-cols-2 gap-8 portrait:flex portrait:flex-col">
      <Index each={[0, 1, 2, 3]}>
        {(i) =>
          <Ruler
            small={true}
            layer={2}
            idx={i()}
            patterns={props.patterns}
            state={props.state}
          />
        }
    <div class="h-24 mt-12 largetext grid grid-cols-2 gap-8">
      Nombre d'it√©rations: {props.state.iter}
      <Show when={props.nbStates > 1}>
        <div>
          <button class="btn" onClick={props.runSimulation}>Lancer
          <input
            class="inputrange range-lg"
            type="range"
            min="0"
            max={props.nbStates - 1}
            value={props.stateIdx}
            onChange={(e) => props.changeCurrentState(e.currentTarget.valueAsNumber)}
          />
  <div class="dialog-buttons">
    <button class="btn" onClick={props.learn}>Apprendre
    <button class="btn" onClick={props.closeDialog}>OK

export default AllNeuronsDialog
