import { Component, Index, Match, Show, Switch } from "solid-js"

weightToString := (weight: number) =>
  weight === 1 ? "" : weight === -1 ? "-" : weight.toFixed(3)

type CalculusComponent = Component<{
  editMode: boolean
  weights: number[]
  threshold: number
  layer: number
  changeWeight: (idx: number, val: number) =>
  changeThreshold: (val: number) =>
}>

Calculus: CalculusComponent := (props) =>
  <div .largetext>
    <Switch>
      <Match when={props.editMode}>
        <span>
          <Index each={props.weights}>
            {(weight, i) =>
              <Show when={i > 0}>
                <span class="mx-4">+
              <span>
                <input
                  class="inputnumber"
                  type="number"
                  value={weight()}
                  onChange={(e) => props.changeWeight(i, e.currentTarget.valueAsNumber)}
                />
                <div class="inline-block w-8 h-8">
                  <svg class="w-full h-full">
                    <use href={`#neuron-${(props.layer === 2 ? 6 : 0) + i}`} />
            }
      <Match when={true}>
        <span>
          <Index each={props.weights}>
            {(weight, i) => 
              <Show when={weight() !== 0}>
                {i > 0 && weight() > 0 ? "+" : ""}
                {weightToString(weight())}
                <div class="inline-block w-8 h-8">
                  <svg class="w-full h-full">
                    <use href={`#neuron-${(props.layer === 2 ? 6 : 0) + i}`} />
            }
    <br/>
    Seuil: 
    <Show when={props.editMode} fallback={""+props.threshold}>
      <input
        class="inputnumber"
        type="number"
        value={props.threshold}
        onChange={(e) => props.changeThreshold(e.currentTarget.valueAsNumber)}
      />

export default Calculus